#!/usr/bin/wal

(defun is-bin [signal start i]
  (cond [(! (in (get signal)@i '(0 1 "x"))) (seta types signal #f)]
        [(> i (+ start 20)) (seta types signal #t)]
	[#t (is-bin signal start (+ i 1))]))	

(defun print-header ()
       (set (start INDEX))
       (printf (+ "%" max-signal "s: ") "Index")
       (when (>= INDEX 4) (step -4))
       (set [run #t])
       (while (&& (< INDEX (+ start 20)) run)
       	      (printf "%-4d" INDEX)
	      (set [run (step)]))
       (print)
       (step -20))

(defun print-bin (signal index)
       (set (start INDEX))
       (printf (+ "%" max-signal "s: ") signal)
       (when (>= INDEX 4) (step -4))
       (set [run #t])
       (while (&& (< INDEX (+ start 20)) run)
       	      (when (= INDEX start) (printf "|"))
	      (set (sym (case (get signal) (0 "⎽") (1 "⎻") ("x" "X"))))
       	      (if (!= (get signal) (get signal)@-1)
       	      	  (if (get signal) (printf "/%s%s%s" sym sym sym) (printf "\%s%s%s" sym sym sym))
		  (printf "%s%s%s%s" sym sym sym sym))
	      (set [run (step)]))
       (print)
       (step -20))

(defun print-signal (signal index)
       (printf (+ "%" max-signal "s: ") signal)
       (set (start INDEX))
       (when (>= INDEX 4) (step -4))
       (set [run #t])
       (while (&& (< INDEX (+ start 20)) run)       
       	      (when (= INDEX start) (printf "|"))
	      (set (v (get signal))
		   (p (get signal)@-1)
		   (n (get signal)@1))
	      (cond [(= v 0) (printf "────")]
	      	    [(= v "x") (printf "XXXX")]
		    [(!= p v) (printf "┤%3x" v)]
		    [(&& (!= p v) (!= v n)) (printf "┤%2x├" v)]
		    [(!= v n) (printf "   ├")]
	      	    [#t (printf "    ")])
	      (set [run (step)]))
       (print)
       (step -20))

(defun render [signals]
       (printf (+ "%" max-signal "s: %s\n") "Waveform" TRACE-FILE)
       (printf (+ "%" max-signal "s: %s\n") "Scope" CS)
       (print-header)
       (map (fn (signal)
       	    	    (if (geta types signal)
		    	(print-bin signal 10)
			(print-signal signal 10))) signals))
      
;--------------------------------------------------------------------------------
; Main Program
;--------------------------------------------------------------------------------
(when (< (length args) 1)
      (print "No vcd or fst file specified")
      (print "usage: print-vcd filename scope")
      (exit 1))

(load args[0] t)

; init types array
(set [types (array)])

; get type of each signal in next 20 cycles
(map (fn [x] (is-bin x INDEX 0)) SIGNALS)

;(step 2) ; (step args[3])
(set (max-signal (max (map (fn [x] (length x)) SIGNALS))))

;; Set current scope
(if (> (length args) 1)
    (in-scope args[1] (render SIGNALS))
    (render SIGNALS))
